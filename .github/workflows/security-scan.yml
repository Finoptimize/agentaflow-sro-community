name: Security Scan

on:
  schedule:
    # Run every Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
  push:
    branches: ['main']
    paths:
      - 'docker/**'
      - 'go.mod'
      - 'go.sum'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Scan source code for vulnerabilities
  code-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to succeed even if vulnerabilities are found
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-code-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-code-results.sarif'
          category: 'code-scan'

  # Scan Go dependencies
  dependency-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to succeed even if vulnerabilities are found
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.21'
          cache: true
      
      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || echo "Vulnerabilities found"
      
      - name: Download dependencies for scanning
        run: go mod download
      
      - name: Run Nancy (OSS Index scanner)
        run: |
          go install github.com/sonatype-nexus-community/nancy@latest
          go list -json -m all | nancy sleuth
        continue-on-error: true

  # Scan container images
  container-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to succeed even if images don't exist yet
    permissions:
      security-events: write
      contents: read
      packages: read
    strategy:
      matrix:
        component:
          - web-dashboard
          - k8s-scheduler
          - prometheus-demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull latest image
        id: pull-image
        run: |
          IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          if docker pull ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${{ matrix.component }}-latest; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
            echo "image_ref=${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${{ matrix.component }}-latest" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "Image not found, skipping scan for ${{ matrix.component }}"
          fi
        continue-on-error: true
      
      - name: Run Trivy container scan
        if: steps.pull-image.outputs.image_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.pull-image.outputs.image_ref }}
          format: 'sarif'
          output: 'trivy-${{ matrix.component }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
        continue-on-error: true
      
      - name: Upload container scan results
        if: steps.pull-image.outputs.image_exists == 'true' && (success() || failure())
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.component }}.sarif'
          category: 'container-${{ matrix.component }}'
        continue-on-error: true
      
      - name: Run Grype vulnerability scanner
        if: steps.pull-image.outputs.image_exists == 'true'
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.pull-image.outputs.image_ref }}
          fail-build: false
          severity-cutoff: high
        continue-on-error: true

  # CodeQL analysis
  codeql-analysis:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to succeed even if CodeQL finds issues
    permissions:
      security-events: write
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        language: ['go']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to succeed even if secrets are detected
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Security summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [code-scan, dependency-scan, container-scan, codeql-analysis, secret-scan]
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Source Code Vulnerability Scan (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Go Dependency Vulnerability Check (govulncheck)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Container Image Scans (Trivy + Grype)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… CodeQL Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Secret Detection (Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "Review findings in the [Security tab](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
