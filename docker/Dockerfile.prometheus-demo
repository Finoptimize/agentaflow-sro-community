# Multi-stage Dockerfile for AgentaFlow Prometheus Integration Demo
# Includes Prometheus metrics export and GPU monitoring

# Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Create non-root user
RUN adduser -D -s /bin/sh -u 1000 appuser

# Set working directory
WORKDIR /build

# Copy go mod files and download dependencies
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the Prometheus demo application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o prometheus-demo \
    ./examples/demo/prometheus-grafana/main.go

# Runtime stage - Distroless
FROM gcr.io/distroless/static-debian12:nonroot

# Copy essentials from builder
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the compiled binary
COPY --from=builder --chown=nonroot:nonroot /build/prometheus-demo /app/prometheus-demo

# Set working directory
WORKDIR /app

# Use non-root user
USER nonroot:nonroot

# Expose Prometheus metrics port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD ["/app/prometheus-demo", "--health-check"]

# Environment defaults
ENV LOG_LEVEL=info \
    METRICS_PORT=8080 \
    GPU_SIMULATION=true

# Labels
LABEL org.opencontainers.image.title="AgentaFlow Prometheus Demo" \
      org.opencontainers.image.description="Prometheus metrics integration demo with GPU monitoring" \
      org.opencontainers.image.vendor="FinOptimize" \
      org.opencontainers.image.source="https://github.com/Finoptimize/agentaflow-sro-community" \
      org.opencontainers.image.licenses="Apache-2.0"

# Application entrypoint
ENTRYPOINT ["/app/prometheus-demo"]
